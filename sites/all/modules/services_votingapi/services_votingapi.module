<?php

/**
 * @file
 * Provide VotingAPI integration with Services.
 */

/**
 * Implements hook_permission().
 */

function services_votingapi_permission() {
  return array(
    'retrieve votes' => array(
      'title' => t('Retrieve votes'),
      'description' => t('Retrieve single votes and vote results.'),
    ),
	'access votes' => array(
      'title' => t('access votes'),
      'description' => t('access votes and vote results.'),
    ),
    'set votes' => array(
      'title' => t('Set votes'),
      'description' => t('Vote for an entity.'),
    ),
  );
}


  
/**
 * Implements hook_services_resources().
 */
function services_votingapi_services_resources() {

  // File where resources stored.
  $file = array(
    'type' => 'inc',
    'module' => 'services_votingapi',
    'name' => 'services_votingapi.resource'
  );

  $votingapi_resource = array(
    'votingapi' => array(
      'actions' => array(

        // Get votes.
        'select_votes' => array(
          'help' => t('Select votes or vote results.'),
          'callback' => '_services_votingapi_resource_select_votes',
          'file' => $file,
          'args' => array(
            array(
              'name' => 'type',
              'optional' => FALSE,
              'source' => array('data' => 'type'),
              'type' => 'string',
              'description' => 'Type of the result to get.',
            ),
            array(
              'name' => 'single',
              'optional' => TRUE,
              'source' => array('data' => 'single'),
              'type' => 'int',
              'description' => 'Single or multiple results are expected.',
              'default value' => 0,
            ),
            array(
              'name' => 'criteria',
              'optional' => TRUE,
              'source' => array('data' => 'criteria'),
              'type' => 'array',
              'description' => 'Selection criteria',
            ),
            array(
              'name' => 'limit',
              'optional' => TRUE,
              'source' => array('data' => 'limit'),
              'type' => 'int',
              'description' => 'Amount of result votes to get.',
              'default value' => 0,
            ),
          ),
          'access arguments' => array('retrieve votes'),
        ),
		//2014 10 15 begin
		
		 'getuservotes' => array(
          'callback' => 'votingapi_service_get_user_votes',
		   'file' => $file,
          'access arguments' => array('access votes'),
          'args' => array(
            array(
              'name' => 'content_id',
              'type' => 'int',
              'description' => t('Content ID.'),
              'source' => array('data' => 'content_id'),
            ),
            array(
              'name' => 'content_type',
              'type' => 'string',
              'description' => t('Content type.'),
              'source' => array('data' => 'content_type'),
              'optional' => TRUE,
              'default value' => 'node',
            ),
            array(
              'name' => 'tag',
              'type' => 'string',
              'description' => t('Vote tag. Default to all tags.'),
              'source' => array('data' => 'tag'),
              'optional' => TRUE,
            ),
            array(
              'name' => 'uid',
              'type' => 'int',
              'description' => t('User ID.'),
              'source' => array('data' => 'uid'),
              'optional' => TRUE,
            ),
          ),
          'return' => 'array',
          'help' => t('Returns all votes cast by a given user for a piece of content.'),
        ),
		
		//2014 10 15 end

        // Set votes.
        'set_votes' => array(
          'help' => t('Set votes for an entity.'),
          'callback' => '_services_votingapi_resource_set_votes',
          'file' => $file,
          'args' => array(
            array(
              'name' => 'votes',
              'optional' => FALSE,
              'source' => array('data' => 'votes'),
              'type' => 'array',
            ),
            array(
              'name' => 'criteria',
              'optional' => TRUE,
              'source' => array('data' => 'criteria'),
              'type' => 'array',
              'default value' => NULL,
            ),
          ),
          'access arguments' => array('set votes'),
        )
      ),

    ),
  );

  return $votingapi_resource;
}

